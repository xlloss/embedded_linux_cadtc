=====================================================================
					Building Linux kernel
=====================================================================
0.	# source /home/cadtc/tiny4412/experiment/set_arm_4412_toolchain_path.sh

1.
		# cd /home/cadtc/tiny4412/experiment/
			git clone https://github.com/embeddedclass/tiny4412-kernel.git
			
2.	# make distclean

3.	# make tiny4412_rtl8188cu_linux_defconfig

4.	# make -j4

5.	# check output kernel image : arch/arm/boot/zImage







=====================================================================
					MAKE HELP
=====================================================================

1.	# make help 

Cleaning targets:
  clean		  - Remove most generated files but keep the config and
                    enough build support to build external modules
  mrproper	  - Remove all generated files + config + various backup files
  distclean	  - mrproper + remove editor backup and patch files

Configuration targets:
  config	  - Update current config utilising a line-oriented program
  nconfig         - Update current config utilising a ncurses menu based program
  menuconfig	  - Update current config utilising a menu based program
  xconfig	  - Update current config utilising a QT based front-end
  gconfig	  - Update current config utilising a GTK based front-end
  oldconfig	  - Update current config utilising a provided .config as base
  localmodconfig  - Update current config disabling modules not loaded
  localyesconfig  - Update current config converting local mods to core
  silentoldconfig - Same as oldconfig, but quietly, additionally update deps
  defconfig	  - New config with default from ARCH supplied defconfig
  savedefconfig   - Save current config as ./defconfig (minimal config)
  allnoconfig	  - New config where all options are answered with no
  allyesconfig	  - New config where all options are accepted with yes
  allmodconfig	  - New config selecting modules when possible
  alldefconfig    - New config with all symbols set to default
  randconfig	  - New config with random answer to all options
  listnewconfig   - List new options
  oldnoconfig     - Same as silentoldconfig but set new symbols to n (unset)

Other generic targets:
  all		  - Build all targets marked with [*]
* vmlinux	  - Build the bare kernel
* modules	  - Build all modules
  modules_install - Install all modules to INSTALL_MOD_PATH (default: /)
  firmware_install- Install all firmware to INSTALL_FW_PATH
                    (default: $(INSTALL_MOD_PATH)/lib/firmware)
  dir/            - Build all files in dir and below
  dir/file.[oisS] - Build specified target only
  dir/file.lst    - Build specified mixed source/assembly target only
                    (requires a recent binutils and recent build (System.map))
  dir/file.ko     - Build module including final link
  modules_prepare - Set up for building external modules
  tags/TAGS	  - Generate tags file for editors
  cscope	  - Generate cscope index
  gtags           - Generate GNU GLOBAL index
  kernelrelease	  - Output the release version string
  kernelversion	  - Output the version stored in Makefile
  headers_install - Install sanitised kernel headers to INSTALL_HDR_PATH
                    (default: /home/slash/work/exynos4412/build/linux_3.5.0_tiny4412/usr)

Static analysers
  checkstack      - Generate a list of stack hogs
  namespacecheck  - Name space analysis on compiled kernel
  versioncheck    - Sanity check on version.h usage
  includecheck    - Check for duplicate included header files
  export_report   - List the usages of all exported symbols
  headers_check   - Sanity check on exported headers
  headerdep       - Detect inclusion cycles in headers
  coccicheck      - Check with Coccinelle.

Kernel packaging:
  rpm-pkg             - Build both source and binary RPM kernel packages
  binrpm-pkg          - Build only the binary kernel package
  deb-pkg             - Build the kernel as a deb package
  tar-pkg             - Build the kernel as an uncompressed tarball
  targz-pkg           - Build the kernel as a gzip compressed tarball
  tarbz2-pkg          - Build the kernel as a bzip2 compressed tarball
  tarxz-pkg           - Build the kernel as a xz compressed tarball
  perf-tar-src-pkg    - Build perf-3.5.0.tar source tarball
  perf-targz-src-pkg  - Build perf-3.5.0.tar.gz source tarball
  perf-tarbz2-src-pkg - Build perf-3.5.0.tar.bz2 source tarball
  perf-tarxz-src-pkg  - Build perf-3.5.0.tar.xz source tarball

Documentation targets:
 Linux kernel internal documentation in different formats:
  htmldocs        - HTML
  pdfdocs         - PDF
  psdocs          - Postscript
  xmldocs         - XML DocBook
  mandocs         - man pages
  installmandocs  - install man pages generated by mandocs
  cleandocs       - clean all generated DocBook files

Architecture specific targets (arm):
* zImage        - Compressed kernel image (arch/arm/boot/zImage)
  Image         - Uncompressed kernel image (arch/arm/boot/Image)
* xipImage      - XIP kernel image, if configured (arch/arm/boot/xipImage)
  uImage        - U-Boot wrapped zImage
  bootpImage    - Combined zImage and initial RAM disk
                  (supply initrd image via make variable INITRD=<path>)
  dtbs          - Build device tree blobs for enabled boards
  install       - Install uncompressed kernel
  zinstall      - Install compressed kernel
  uinstall      - Install U-Boot wrapped compressed kernel
                  Install using (your) ~/bin/installkernel or
                  (distribution) /sbin/installkernel or
                  install to $(INSTALL_PATH) and run lilo

  acs5k_defconfig          - Build for acs5k
  acs5k_tiny_defconfig     - Build for acs5k_tiny
  afeb9260_defconfig       - Build for afeb9260
  ag5evm_defconfig         - Build for ag5evm
  am200epdkit_defconfig    - Build for am200epdkit
  lart_defconfig           - Build for lart
  lpc32xx_defconfig        - Build for lpc32xx
  lpd270_defconfig         - Build for lpd270
  lubbock_defconfig        - Build for lubbock
  sam9_l9260_defconfig     - Build for sam9_l9260
  shannon_defconfig        - Build for shannon
  shark_defconfig          - Build for shark
  simpad_defconfig         - Build for simpad
  spear13xx_defconfig      - Build for spear13xx
  spear3xx_defconfig       - Build for spear3xx
  spear6xx_defconfig       - Build for spear6xx
  spitz_defconfig          - Build for spitz
  stamp9g20_defconfig      - Build for stamp9g20
  tct_hammer_defconfig     - Build for tct_hammer
  tegra_defconfig          - Build for tegra
  tiny4412_linux_defconfig - Build for tiny4412_linux
  tiny4412_ubuntu_defconfig - Build for tiny4412_ubuntu
  trizeps4_defconfig       - Build for trizeps4
  u300_defconfig           - Build for u300
  u8500_defconfig          - Build for u8500
  usb-a9260_defconfig      - Build for usb-a9260
  versatile_defconfig      - Build for versatile
  vexpress_defconfig       - Build for vexpress
  viper_defconfig          - Build for viper
  xcep_defconfig           - Build for xcep
  zeus_defconfig           - Build for zeus

  make V=0|1 [targets] 0 => quiet build (default), 1 => verbose build
  make V=2   [targets] 2 => give reason for rebuild of target
  make O=dir [targets] Locate all output files in "dir", including .config
  make C=1   [targets] Check all c source with $CHECK (sparse by default)
  make C=2   [targets] Force check of all c source with $CHECK
  make RECORDMCOUNT_WARN=1 [targets] Warn about ignored mcount sections
  make W=n   [targets] Enable extra gcc checks, n=1,2,3 where
		1: warnings which may be relevant and do not occur too often
		2: warnings which occur quite often but may still be relevant
		3: more obscure warnings, can most likely be ignored
		Multiple levels can be combined with W=12 or W=123

Execute "make" or "make all" to build all targets marked with [*] 
For further info see the ./README file





=====================================================================
				Building and install  modules
=====================================================================

1.	# make modules

2.	# make kernelrelease

3.	# INSTALL_MOD_PATH=INSTALL_PATH
			example : export INSTALL_MOD_PATH=/home/cadtc/work/tiny4412/experiment/tiny4412-kernel/module

4.	# make modules_install



=====================================================================
				Modify ourself kernel version name
=====================================================================

1. # make kernelrelease

2. # make menuconfig

3. # General setup →  () Local version




=====================================================================
		Configure kernel (use menuconfig for configuration)
=====================================================================

1.	# make menuconfig

2.	# add/delete driver
		add – build-in
		add – build module
		delete







=====================================================================
					Create kernel configure file
=====================================================================
A:
1.	# make savedefconfig (min) - we will get defconfig in local currently directory

2.	# mv  defconfig hello_defconfig

3.	# mv hello_defconfig  arch/arm/configs

4.	# make help | grep hello – confirm our configure

-----------------------------------------------------------------------
B:
1.	# cp .config  hello_all_defconfig(all) - we will get defconfig in local currently directory

3.	# mv hello_all_defconfig  arch/arm/configs

4.	# make help | grep hello_all – confirm our configure



========================================================================                      
					Download kernel Image
=========================================================================
	
[ Host ]
2.	# cd ~/tiny4412/experiment/experiment/tiny4412-kernel/linux_3.5.0_tiny4412/arch/arm/boot
			sudo dnw ./zImage

[ Target ] (u-boot)
1.	# dnw 0xc0008000

3.  # set bootargs noinitrd init=/linuxrc root=/dev/nfs ip=192.168.0.20:192.168.0.10:192.168.0.1:255.255.255.0::eth0:on nfsroot=192.168.0.10:/home/cadtc/tiny4412/experiment/root_mkfs, console=ttySAC0 lcd=S70

4.	# savenv
5.	# bootm 0xc00080000
